{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 16a131fdf65313eb6b34","webpack:///(webpack)/buildin/amd-define.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/jpeg/index.js","webpack:///./src/jpeg/sections.js","webpack:///./src/jpeg/decoder.js","webpack:///./src/jpeg/quantGlitcher.js","webpack:///./src/utils/index.js","webpack:///./src/index.js","webpack:///./src/jpeg/parsers.js","webpack:///./~/seedrandom/index.js","webpack:///./~/seedrandom/lib/alea.js","webpack:///./~/seedrandom/lib/tychei.js","webpack:///./~/seedrandom/lib/xor128.js","webpack:///./~/seedrandom/lib/xor4096.js","webpack:///./~/seedrandom/lib/xorshift7.js","webpack:///./~/seedrandom/lib/xorwow.js","webpack:///./~/seedrandom/seedrandom.js","webpack:///crypto (ignored)"],"names":["Jpeg","copy","getSections","data","type","sections","slice","sectionName","jpeg","filter","section","Section","STARTBYTE","PADBYTE","SOF0","name","tag","Uint8Array","SOF2","DHT","DQT","SOS","SOI","EOI","COM","APP","upper","lower","size","position","decodeJpeg","parsers","getParser","firstTagByte","secondTagByte","find","p","parses","decodeJpegRecur","imageData","length","Error","toString","parser","undefined","parseData","newPosition","concat","glitchQuantisationTable","randomQuantGlitch","quantGlitch","opts","rng","seed","entropy","depth","Math","floor","map","s","qt","idx","quantTable","jpegFromCanvas","imageFromJpeg","fileToUint8","cb","event","target","result","canvasElem","quality","toBlob","r","FileReader","onload","readAsArrayBuffer","blob","console","log","objurl","URL","createObjectURL","Blob","img","Image","src","utils","JpegSectionParser","pTag","pTagSize","segmentStart","segmentSize","JpegSOIParser","JpegEOIParser","JpegSOSParser","segmentHeaderSize","i","finalSize","JpegAPPParser","pTagUpper","pTagLower"],"mappings":"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;AACA;AACA;AACA;;AAEA;;;;;;;8CC3DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA,kBAAkB,YAAY;AAC9B;AACA,kBAAkB,YAAY;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,sCAAsC;AACjE;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,8CAA8C;AAC9C;;AAEA;AACA;;;AAGA;AACA;AACA,CAAC;AACD,gDAAqB,aAAa,EAAE;AAAA;AACpC,CAAC;AACD;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;;;;;;;;;;8CC/GA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE;AAClD;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,gDAAqB,aAAa,EAAE;AAAA;AACpC,CAAC;AACD;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;;;;;;;;;;8CCpGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE;AAClD;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,gDAAqB,aAAa,EAAE;AAAA;AACpC,CAAC;AACD;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;;;;;;;;;;8CC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,8CAA8C;AAC9C,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,oCAAoC;AACpC,iCAAiC;AACjC;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE;AAClD;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,gDAAqB,aAAa,EAAE;AAAA;AACpC,CAAC;AACD;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;;;;;;;;8CCjJA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,8BAA8B;;AAE9B;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE;AAClD;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,gDAAqB,aAAa,EAAE;AAAA;AACpC,CAAC;AACD;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;;;;;;;;;8CC/FA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,aAAa,aAAa;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,wCAAwC;AACjE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE;AAClD;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,gDAAqB,aAAa,EAAE;AAAA;AACpC,CAAC;AACD;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;;;;;;;;;;ACnFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB,iBAAiB;;AAElE;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,8BAA8B;AAC9B,0BAA0B;AAC1B,iBAAiB;AACjB,oBAAoB;AACpB;AACA,2BAA2B;AAC3B,aAAa;AACb,aAAa;AACb,eAAe;AACf;AACA,uBAAuB;AACvB;;AAEA,2BAA2B,sBAAsB;AACjD,2BAA2B,gCAAgC;AAC3D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA,mCAAmC,qBAAqB,EAAE;AAC1D;;AAEA;AACA;AACA,2BAA2B,sBAAsB,aAAa;;AAE9D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,kBAAkB;;AAElC;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4CAA4C,EAAE;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD,gDAAqB,mBAAmB,EAAE;AAAA;AAC1C;;AAEA;AACA,CAAC;AACD;AACA;AACA;;;;;;;ACtPA,e","file":"glitchlib.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"glitchlib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"glitchlib\"] = factory();\n\telse\n\t\troot[\"glitchlib\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 16a131fdf65313eb6b34","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-define.js\n// module id = 0\n// module chunks = 0","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-options.js\n// module id = 1\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 2\n// module chunks = 0","import decodeJpeg from './decoder';\n\nexport function Jpeg(data) {\n  return {\n    type: 'jpeg',\n    data,\n    sections: decodeJpeg(data),\n  };\n}\n\nexport function copy({ data }) {\n  // results in reparsing the new jpeg\n  // may or may not be a bad idea\n  return Jpeg(data.slice());\n}\n\nexport function getSections(sectionName, jpeg) {\n  return jpeg.sections.filter(({ section }) => section === sectionName);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/jpeg/index.js","export const STARTBYTE = 0xff;\nexport const PADBYTE = 0x00;\nexport const SOF0 = { name: 'SOF0', tag: new Uint8Array([STARTBYTE, 0xc0]) };\nexport const SOF2 = { name: 'SOF2', tag: new Uint8Array([STARTBYTE, 0xc2]) };\nexport const DHT = { name: 'DHT', tag: new Uint8Array([STARTBYTE, 0xc4]) };\nexport const DQT = { name: 'DQT', tag: new Uint8Array([STARTBYTE, 0xdb]) };\nexport const SOS = { name: 'SOS', tag: new Uint8Array([STARTBYTE, 0xda]) };\nexport const SOI = { name: 'SOI', tag: new Uint8Array([STARTBYTE, 0xd8]) };\nexport const EOI = { name: 'EOI', tag: new Uint8Array([STARTBYTE, 0xd9]) };\nexport const COM = { name: 'COM', tag: new Uint8Array([STARTBYTE, 0xfe]) };\nexport const APP = {\n  name: 'SOS',\n  upper: new Uint8Array([STARTBYTE, 0xef]),\n  lower: new Uint8Array([STARTBYTE, 0xe0]),\n  tag: new Uint8Array([STARTBYTE, 0xe0]),\n};\n\nexport function Section(section, size, position) {\n  return {\n    section,\n    size,\n    position,\n  };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/jpeg/sections.js","import {\n  JpegSectionParser,\n  JpegSOIParser,\n  JpegSOSParser,\n  JpegEOIParser,\n  JpegAPPParser,\n} from './parsers';\n\nimport { STARTBYTE, SOF0, SOF2, DHT, DQT, COM } from './sections';\n\nconst parsers = [\n  new JpegSOIParser(),\n  new JpegSectionParser(SOF0),\n  new JpegSectionParser(SOF2),\n  new JpegSectionParser(DHT),\n  new JpegSectionParser(DQT),\n  new JpegSOSParser(),\n  new JpegAPPParser(),\n  new JpegSectionParser(COM),\n  new JpegEOIParser(),\n];\n\nfunction getParser(firstTagByte, secondTagByte) {\n  return parsers.find(p => p.parses(firstTagByte, secondTagByte));\n}\n\nfunction decodeJpegRecur(imageData, sections, position) {\n  if (position >= imageData.length) {\n    return sections;\n  }\n  const firstTagByte = imageData[position];\n  const secondTagByte = imageData[position + 1];\n  if (firstTagByte !== STARTBYTE) {\n    throw new Error(`Invalid initial tag value: ${firstTagByte.toString(16)}`);\n  }\n  const parser = getParser(firstTagByte, secondTagByte);\n  if (parser === undefined) {\n    throw new Error(`Could not find parser for ${secondTagByte.toString(16)}`);\n  }\n  const section = parser.parseData(imageData, position);\n  const newPosition = position + section.size;\n  return decodeJpegRecur(imageData, sections.concat([section]), newPosition);\n}\n\n// imageData should be a Uint8Array\nexport default function decodeJpeg(imageData) {\n  return decodeJpegRecur(imageData, [], 0);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/jpeg/decoder.js","import { getSections } from './index';\nimport { DQT } from './sections';\n\nimport seedrandom from 'seedrandom';\n\nexport function glitchQuantisationTable(jpeg, section, opts = {}) {\n  const rng = seedrandom(opts.seed, { entropy: !opts.seed });\n  const depth = opts.depth || 0.1;\n  for (\n    let p = section.position + 2;\n    p < section.position + section.size;\n    p += 1\n  ) {\n    if (rng() < depth) {\n      jpeg.data[p] = Math.floor(rng() * 253 + 1);\n    }\n  }\n}\n\nexport function randomQuantGlitch(jpeg) {\n  getSections(DQT.name, jpeg).map(s => glitchQuantisationTable(jpeg, s));\n}\n\nexport function quantGlitch(jpeg, opts) {\n  getSections(DQT.name, jpeg)\n    .filter((qt, idx) => {\n      if (!opts || !opts.quantTable) {\n        return true;\n      }\n      return idx === opts.quantTable;\n    })\n    .map(s => glitchQuantisationTable(jpeg, s, opts));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/jpeg/quantGlitcher.js","import { Jpeg } from 'jpeg';\n\nexport const fileToUint8 = cb => event => {\n  cb(Jpeg(new Uint8Array(event.target.result)));\n};\n\nexport function jpegFromCanvas(canvasElem, cb, quality = 0.95) {\n  canvasElem.toBlob(\n    blob => {\n      var r = new FileReader();\n      r.onload = fileToUint8(cb);\n      r.readAsArrayBuffer(blob);\n    },\n    'image/jpeg',\n    quality\n  );\n}\n\nexport function imageFromJpeg(jpeg, cb) {\n  console.log('loading image from jpeg');\n  const objurl = URL.createObjectURL(new Blob([jpeg.data]), {\n    type: 'image/jpeg',\n  });\n  const img = new Image();\n  img.onload = () => {\n    console.log('image loaded');\n    cb(img);\n  };\n  img.src = objurl;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/index.js","import decodeJpeg from 'jpeg/decoder';\nimport { quantGlitch, randomQuantGlitch } from 'jpeg/quantGlitcher';\nimport * as Jpeg from 'jpeg';\n\nimport * as utils from 'utils';\n\nexport { decodeJpeg, quantGlitch, randomQuantGlitch, utils, Jpeg };\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import { STARTBYTE, PADBYTE, SOI, SOS, APP, EOI, Section } from './sections';\n\nexport class JpegSectionParser {\n  constructor(section) {\n    this.pTag = section.tag;\n    this.name = section.name;\n    this.pTagSize = section.tag.length;\n  }\n  parses(firstTagByte, secondTagByte) {\n    return this.pTag[0] === firstTagByte && this.pTag[1] === secondTagByte;\n  }\n  parseData(data, position) {\n    // Section size does not include initial tag\n    const segmentStart = position + this.pTagSize;\n    const segmentSize = data[segmentStart] * 8 + data[segmentStart + 1];\n    const size = this.pTagSize + segmentSize;\n    return Section(this.name, size, position);\n  }\n}\n\nexport class JpegSOIParser extends JpegSectionParser {\n  constructor() {\n    super(SOI);\n  }\n  parseData(data, position) {\n    // This is the opening tag so it's only ever 2 bytes\n    const size = 2;\n    return Section(this.name, size, position);\n  }\n}\n\nexport class JpegEOIParser extends JpegSectionParser {\n  constructor() {\n    super(EOI);\n  }\n  parseData(data, position) {\n    // This is the closing tag so it's only ever 2 bytes\n    const size = 2;\n    return Section(this.name, size, position);\n  }\n}\n\nexport class JpegSOSParser extends JpegSectionParser {\n  constructor() {\n    super(SOS);\n  }\n  parseData(data, position) {\n    // Section size does not include initial tag\n    const segmentStart = position + this.pTagSize;\n    const segmentSize = data[segmentStart] * 8 + data[segmentStart + 1];\n    const segmentHeaderSize = this.pTagSize + segmentSize;\n    let i;\n    for (i = position + segmentHeaderSize; i < data.length; i += 1) {\n      if (data[i] === STARTBYTE && data[i + 1] !== PADBYTE) {\n        break;\n      }\n    }\n    const finalSize = i - position;\n    return Section(this.name, finalSize, position);\n  }\n}\n\nexport class JpegAPPParser extends JpegSectionParser {\n  constructor() {\n    super(APP);\n    this.pTagUpper = APP.upper;\n    this.pTagLower = APP.lower;\n  }\n  parses(firstTagByte, secondTagByte) {\n    return (\n      this.pTagLower[0] === firstTagByte &&\n      this.pTagLower[1] <= secondTagByte &&\n      this.pTagUpper[1] >= secondTagByte\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/jpeg/parsers.js","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/index.js\n// module id = 10\n// module chunks = 0","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/lib/alea.js\n// module id = 11\n// module chunks = 0","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/lib/tychei.js\n// module id = 12\n// module chunks = 0","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/lib/xor128.js\n// module id = 13\n// module chunks = 0","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/lib/xor4096.js\n// module id = 14\n// module chunks = 0","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/lib/xorshift7.js\n// module id = 15\n// module chunks = 0","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/lib/xorwow.js\n// module id = 16\n// module chunks = 0","/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar global = this,\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/seedrandom/seedrandom.js\n// module id = 17\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// crypto (ignored)\n// module id = 18\n// module chunks = 0"],"sourceRoot":""}